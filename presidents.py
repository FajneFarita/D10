#!/usr/bin/env python3# Exercise: Presidents# Author GitHub usernames:# #1:# #2:# Instructions:# Write a program to:# (1) Load the data from presidents.txt into a dictionary.# (2) Print the years the greatest and least number of presidents were alive.#     (between 1732 and 2016 (inclusive))#     Ex.#       'least = 2015'#       'John Doe'#       'most = 2015'#       'John Doe, Jane Doe, John Adams, and Jane Adams'# Bonus: Confirm there are no ties. If there is a tie print like so:#     Ex.#       'least = 1900, 2013-2015'#       'John Doe (1900)'#       'Jane Doe (2013-2015)'#       'most = 1900-1934, 2013'#       'John Doe, Jane Doe, John Adams, and Jane Adams (1900-1933)'#       'Sally Doe, Billy Doe, Mary Doe, and Cary Doe (1934)'#       'Alice Doe, Bob Doe, Zane Doe, and Yi Do (2013)'# (3) Write your print statements to a file (greatest_least.txt) as well.# Upload that file as well.############################################################################### Imports# Bodyd = {}def presidents():	"""reads the file, assigns 2016 as a death year for currently alive, 	returns a dictionary with names as keys and years of lives as values"""	with open('presidents.txt', 'r') as file:		dct_of_pres = file.readlines()		for line in dct_of_pres[:-1]:			name, birth, death = line.split(',')			if death == 'None\n':				death = '2016\n'			d[name] = list(range(int(birth), int(death[:-1])+1))		return d	def years_counter(d):	"""returns a dict with years (1932-2016) as keys and 	number of presidents alive at these years as values """	dct_of_years = d.values()	dct_of_years = sum(dct_of_years, [])	years_count = {x:dct_of_years.count(x) for x in dct_of_years}	return years_countdef find_max(years_count, d):	"""takes in two dictionaries, finds the year(s) when the most presidents lived;	returns a sorted list of these years	"""	first_max_year = max(years_count, key=years_count.get) #finds the first occurence of max num of alive presidents	max_quant = years_count.get(first_max_year) #the max number of presidents lived in one year	max_years_all = []	for year, count in years_count.items():		if count == years_count[first_max_year]:			max_years_all.append(year)	return max_years_alldef find_min(years_count, d):	"""takes in two dictionaries, finds the year(s) when the least presidents lived;	returns a sorted list of these years	"""	first_min_year = min(years_count, key=years_count.get) #finds the first occurence of min num of alive presidents	min_quant = years_count.get(first_min_year) #the min number of presidents lived in one year	min_years_all = []	for year, count in years_count.items():		if count == years_count[first_min_year]:			min_years_all.append(year)	return min_years_alldef format_years(lst):	"""deals with ties: takes in a sorted list of years and returns a formatted version with consecutive years as a span"""	new_lst = []	first = lst[0]	last = lst[0]	for element in lst[1::]:		if element - 1 == last:			last = element		else:			append_result(new_lst, first, last)			first = element			last = element	append_result(new_lst, first, last)	return new_lstdef append_result(result_lst, first, last):	"""a utility function for format_years()"""	result_lst.append((first, last))	return result_lstdef find_presidents(d, lst_years):	"""finds presidenst who lived in a particular period"""	dic = {}	for year in lst_years:		for name, dates in d.items():			if year in dates:				dic.setdefault(name, []).append(str(year))	return dic						def print_presidents(dic):	"""prepares presidents for print"""	dic1 = {}	strout = ""	for name, dates in dic.items():		dic1.setdefault((dates[0], dates[-1]), []).append(name) #creates tuples of years ranges (1822-1845) and assigns them to list of correspondent presidents		for dates, names in dic1.items():		n = len(names)		if n > 2:			strout += ", ".join(names[0:-1]) + " and " + names[-1] + " (" + str(dates[0]) + "-" + str(dates[-1]) + ") \n"		elif n == 2:			strout += " and ".join(names) + " (" + str(dates[0]) + "-" + str(dates[-1]) + ") \n"		else:			strout += names[0] + " (" + str(dates[0]) + "-" + str(dates[-1]) + ") \n"	return stroutdef print_year(years_formatted, most_or_least):	"""prepares years for print"""	strout = ''	for year in years_formatted:		if strout == '':			strout += most_or_least		else:			strout += ', '		if year[0] == year[1]:			strout += str(year[0])		else:			strout += str(year[0]) + '-' + str(year[1])	return stroutdef tofile(least_years, least_presidents, most_years, most_presidents):	with open("greatest_least.txt", 'a') as f:		f.write(least_years)		f.write("\n")		f.write(least_presidents)		f.write("\n")		f.write(most_years)		f.write("\n")		f.write(most_presidents)##############################################################################def main():  # CALL YOUR FUNCTION BELOW	dictionary = presidents()	years_dict = years_counter(dictionary)	years_most = find_max(years_dict, dictionary)	years_least = find_min(years_dict, dictionary)	years_formatted_max = format_years(years_most)	years_formatted_min = format_years(years_least)	most_presidents_unordered = find_presidents(dictionary, years_most)	least_presidents_unordered = find_presidents(dictionary, years_least)	final_most_years = print_year(years_formatted_max, "most = ")	final_least_years = print_year(years_formatted_min, "least = ")	final_most_presidents = print_presidents(most_presidents_unordered)	final_least_presidents = print_presidents(least_presidents_unordered)	print(final_least_years)		print(final_least_presidents)	print(final_most_years)	print(final_most_presidents)	tofile(final_least_years, final_least_presidents, final_most_years, final_most_presidents)if __name__ == '__main__':    main()